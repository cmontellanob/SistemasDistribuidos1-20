//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//     Versión de runtime:4.0.30319.42000
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ClienteOperaciones2.servicios {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="servicios.OperacionesSoap")]
    public interface OperacionesSoap {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/sumar", ReplyAction="*")]
        int sumar(int a, int b);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/sumar", ReplyAction="*")]
        System.Threading.Tasks.Task<int> sumarAsync(int a, int b);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/restar", ReplyAction="*")]
        int restar(int a, int b);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/restar", ReplyAction="*")]
        System.Threading.Tasks.Task<int> restarAsync(int a, int b);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/multiplicar", ReplyAction="*")]
        int multiplicar(int a, int b);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/multiplicar", ReplyAction="*")]
        System.Threading.Tasks.Task<int> multiplicarAsync(int a, int b);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/dividir", ReplyAction="*")]
        int dividir(int a, int b);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/dividir", ReplyAction="*")]
        System.Threading.Tasks.Task<int> dividirAsync(int a, int b);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface OperacionesSoapChannel : ClienteOperaciones2.servicios.OperacionesSoap, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class OperacionesSoapClient : System.ServiceModel.ClientBase<ClienteOperaciones2.servicios.OperacionesSoap>, ClienteOperaciones2.servicios.OperacionesSoap {
        
        public OperacionesSoapClient() {
        }
        
        public OperacionesSoapClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public OperacionesSoapClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public OperacionesSoapClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public OperacionesSoapClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public int sumar(int a, int b) {
            return base.Channel.sumar(a, b);
        }
        
        public System.Threading.Tasks.Task<int> sumarAsync(int a, int b) {
            return base.Channel.sumarAsync(a, b);
        }
        
        public int restar(int a, int b) {
            return base.Channel.restar(a, b);
        }
        
        public System.Threading.Tasks.Task<int> restarAsync(int a, int b) {
            return base.Channel.restarAsync(a, b);
        }
        
        public int multiplicar(int a, int b) {
            return base.Channel.multiplicar(a, b);
        }
        
        public System.Threading.Tasks.Task<int> multiplicarAsync(int a, int b) {
            return base.Channel.multiplicarAsync(a, b);
        }
        
        public int dividir(int a, int b) {
            return base.Channel.dividir(a, b);
        }
        
        public System.Threading.Tasks.Task<int> dividirAsync(int a, int b) {
            return base.Channel.dividirAsync(a, b);
        }
    }
}
